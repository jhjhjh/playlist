// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: proto/playlist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	// A simple RPC.
	SendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	// A server-to-client streaming RPC.
	ListFeatures(ctx context.Context, in *Command, opts ...grpc.CallOption) (PlaylistService_ListFeaturesClient, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) SendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) ListFeatures(ctx context.Context, in *Command, opts ...grpc.CallOption) (PlaylistService_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaylistService_ServiceDesc.Streams[0], "/playlist.PlaylistService/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistServiceListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaylistService_ListFeaturesClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type playlistServiceListFeaturesClient struct {
	grpc.ClientStream
}

func (x *playlistServiceListFeaturesClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	// A simple RPC.
	SendCommand(context.Context, *Command) (*Response, error)
	// A server-to-client streaming RPC.
	ListFeatures(*Command, PlaylistService_ListFeaturesServer) error
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) SendCommand(context.Context, *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedPlaylistServiceServer) ListFeatures(*Command, PlaylistService_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).SendCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Command)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaylistServiceServer).ListFeatures(m, &playlistServiceListFeaturesServer{stream})
}

type PlaylistService_ListFeaturesServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type playlistServiceListFeaturesServer struct {
	grpc.ServerStream
}

func (x *playlistServiceListFeaturesServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playlist.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _PlaylistService_SendCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _PlaylistService_ListFeatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/playlist.proto",
}
